A estrutura do projeto já está toda montada, basta apenas implementar o reader, que fará um Fetch dos dados da API disponível em:
https://gorest.co.in/public/v1/users

[] Implementar o método read() da classe UserReader
- Criar um método auxiliar para buscar os dados da API - fetchUserDataFromAPI

[] Adicionar dependência SpringWeb para utilizar o RestTemplate
- Instanciar: private RestTemplate restTemplate = new RestTemplate();
- Utilizar restTemplate.getForEntity(): Ele retorna um objeto, a lista de usuários se inicia na tag data. Para "desencapsular", criamos uma classe de apoio chamada ResponseUser no pacote domain.
private List<User> fetchUserDataFromAPI() {
      ResponseEntity<ResponseUser> response = restTemplate.getForEntity(
              String.format("https://gorest.co.in/public/v1/users?page=%d", page),
              ResponseUser.class);

      List<User> userData = response.getBody().getData();

      return userData;
}

[] Configurar o método de leitura.
- Perceba que o retorno do método reade() é um User, ou seja, esse método deverá ser "chamado" quantas vezes o número de usuários retornados no método anterior for válido. Quando for null ele deve sair.
- Criar uma variável global para armazenar o retorno da API:
-- private List<User> users = new ArrayList<>();
- Criar "ponteiro" para identificar qual usuário está sendo lido no momento:
-- private int userIndex = 0;
Resultado final:
@Override
public User read() throws Exception, UnexpectedInputException, ParseException, NonTransientResourceException {
   User user;
   if (userIndex < users.size()) {
       user = users.get(userIndex);
   } else {
       user = null;
   }
   userIndex++;

   return user;
}

[] Criar chamada do método fetchUserDataFromAPI. Evento que irá disparar o carregamento:
- @BeforeChunck
@BeforeChunk
    private void beforeChunk(ChunkContext context) {
        for (int i = 0; i < chunkSize; i += pageSize) {
            if (total >= limit) return;

            List<User> usersData = fetchUserDataFromAPI();
            users.addAll(usersData);
            total += usersData.size();
            page++;
        }
    }

- Lembrar das variáveis de ambiente configuradas em application.properties
@Value("${chunkSize}")
private int chunkSize;

@Value("${pageSize}")
private int pageSize;

@Value("${limit}")
private int limit;

